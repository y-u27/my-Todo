import React, { useState } from "react";

// NICE: „Ç≥„É°„É≥„Éà„Åå‰∏ÅÂØß„Åß„Çè„Åã„Çä„ÇÑ„Åô„ÅÑ„Åß„ÅôÔºÅ
// NICE: ÂëΩÂêç„ÅåÁ´ØÁöÑ„Åß„Çè„Åã„Çä„ÇÑ„Åô„ÅÑ„Åß„ÅôÔºÅ

const TodoApp = () => {
  // REVIEW: „Åì„ÅÆtitles„ÅØtodo„ÅÆ‰∏ÄË¶ß„Çí‰øùÊåÅ„Åô„Çãstate„Å™„ÅÆ„Åß„ÄÅtodos„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆÊñπ„ÅåÈÅ©Âàá„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„Åß„Åô„Å≠üòä
  // ‚Üì„Çø„Ç§„Éà„É´„ÅÆstate
  const [titles, setTitles] = useState([]);
  // REVIEW: „Åì„ÅÆinputTodoList„ÅØtodo„ÅÆ„Çø„Ç§„Éà„É´„Çí‰øùÊåÅ„Åô„Çãstate„Å™„ÅÆ„Åß„ÄÅË©≥Á¥∞„ÅÆstate„Å´Âêà„Çè„Åõ„Å¶inputTodoTitle„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆÊñπ„ÅåÈÅ©Âàá„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„Åß„Åô„Å≠üòä
  // ‚Üì„É™„Çπ„Éà„ÅÆstate
  const [inputTodoList, setInputTodoList] = useState("");
  // ‚ÜìË©≥Á¥∞„ÅÆstate
  const [inputTodoDetail, setInputTodoDetail] = useState("");
  // ‚Üìid„ÅÆstate
  const [id, setId] = useState(0);
  // REVIEW: todoOpenEdit„ÅØid„ÅåÂÖ•„Çã„ÅÆ„ÅßeditId„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆÊñπ„ÅåÈÅ©Âàá„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„Åß„Åô„Å≠üòä
  // REVIEW: id„ÅØÊï∞Â≠ó„Å™„ÅÆ„Åß„ÄÅÂàùÊúüÂÄ§„ÅØnull„Çà„Çä„ÇÇ0„ÅÆÊñπ„ÅåÈÅ©Âàá„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„Åß„Åô„Å≠üòä
  // ‚ÜìÁ∑®ÈõÜ„ÅÆstate
  const [todoOpenEdit, setTodoOpenEdit] = useState(null);
  const [editTitle, setEditTitle] = useState("");
  const [editDetail, setEditDetail] = useState("");
  // ‚ÜìÈÄ≤Ë°å‰∏≠„ÅÆstate
  const [inProgress, setInProgress] = useState([]);
  // ‚ÜìÂÆå‰∫Ü„ÅÆstate
  const [complete, setComplete] = useState([]);

  // ÂÖ•Âäõ„Åï„Çå„ÅüÂÄ§„Çí‰øùÊåÅ„Åô„ÇãÈñ¢Êï∞(Todo„Çø„Ç§„Éà„É´)
  const handleOnChange = (event) => {
    setInputTodoList(event.target.value);
  };

  // ÂÖ•Âäõ„Åï„Çå„ÅüÂÄ§„Çí‰øùÊåÅ„Åô„ÇãÈñ¢Êï∞(TodoË©≥Á¥∞)
  const handleDetail = (event) => {
    setInputTodoDetail(event.target.value);
  };

  // ËøΩÂä†„Éú„Çø„É≥Ê©üËÉΩ
  const todoAddClick = () => {
    // NICE: „Åì„Åì„ÅßÁ©∫ÊñáÂ≠ó„ÅÆÂ†¥Âêà„ÅÆÂá¶ÁêÜ„ÇíËøΩÂä†„Åó„Å¶„ÅÑ„Çã„ÅÆ„ÅåGood„Åß„ÅôÔºÅ
    // REVIEW: Ë©≥Á¥∞„ÇÇÂÖ•Âäõ„Åó„Å¶„Åª„Åó„ÅÑÊÉÖÂ†±„Å™„ÅÆ„Åß„ÄÅË©≥Á¥∞„ÅåÁ©∫ÊñáÂ≠ó„ÅÆÂ†¥Âêà„ÇÇÂá¶ÁêÜ„ÇíËøΩÂä†„Åô„Çã„Å®ËâØ„ÅÑ„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„Å≠üòä
    if (inputTodoList === "") return;
    // Êñ∞„Åó„ÅÑTodo„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê„Åó„Å¶ÈÖçÂàó„Å´ËøΩÂä†
    const newTodo = {
      id: id,
      title: inputTodoList,
      detail: inputTodoDetail,
    };
    setTitles([...titles, newTodo]);
    // NICE: ÂÖ•Âäõ„Éï„Ç©„Éº„É†„Çí„ÇØ„É™„Ç¢„Åô„ÇãÂá¶ÁêÜ„Åå„ÅÇ„Çã„ÅÆ„ÅåGood„Åß„ÅôÔºÅ
    setInputTodoList("");
    setInputTodoDetail("");
    // NICE: id„ÅÆÊõ¥Êñ∞Âá¶ÁêÜ„Åå„ÅÇ„Å£„Å¶ËâØ„ÅÑ„Åß„Åô„Å≠ÔºÅ
    setId(id + 1);
  };

  // Á∑®ÈõÜ„Éú„Çø„É≥Ê©üËÉΩ
  const editButton = (todo) => {
    setTodoOpenEdit(todo.id);
    setEditTitle(todo.title);
    setEditDetail(todo.detail);
  };

  // Á∑®ÈõÜ„Çí‰øùÂ≠ò„Åô„ÇãÊ©üËÉΩ
  const updateEditButton = () => {
    const updatedTitles = titles.map((todo) =>
      todo.id === todoOpenEdit
        ? { ...todo, title: editTitle, detail: editDetail }
        : todo
    );
    setTitles(updatedTitles);
    // ‚ÜìÁ∑®ÈõÜ„Åß„Åç„Çã„ÅãÂà§ÂÆöÔºü
    setTodoOpenEdit(null);
    // ‚ÜìÊõ¥Êñ∞Èñ¢Êï∞„ÇíÁ©∫ÊñáÂ≠ó„Å´Ë®≠ÂÆö
    setEditTitle("");
    setEditDetail("");
  };

  // ÈÄ≤Ë°å‰∏≠„Éú„Çø„É≥Ê©üËÉΩ
  const todoInProgress = (index) => {
    const taskToMove = titles[index];
    const newTitles = [...titles.slice(0, index), ...titles.slice(index + 1)];
    setInProgress([...inProgress, taskToMove]);
    setTitles(newTitles);
  };

  // „ÄåÈÄ≤Ë°å‰∏≠„Å∏„Äç„Éú„Çø„É≥Ê©üËÉΩ‚Üí„ÄåÂÆå‰∫Ü„Äç„Ç®„É™„Ç¢„Å´ÁßªÂãïÂæå„ÄÅ„Åì„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®„ÄåÈÄ≤Ë°å‰∏≠„Äç„Ç®„É™„Ç¢„Å´„Çø„Çπ„ÇØ„ÅåÁßªÂãï„Åô„Çã„Çà„ÅÜ„Å™Ê©üËÉΩ
  // „ÄåÂÆå‰∫Ü„Äç„Ç®„É™„Ç¢„Å´ÁßªÂãï„Åó„ÅüÈÖçÂàó„ÅÆ„Åæ„ÅæÁßªÂãï„Åï„Åõ„Åü„ÅÑ
  const sendTodoInProgress = (id) => {
    const newTitles = [...complete];
    newTitles.splice(id, 1);

    const newAddTitles = [...inProgress, complete[id]];
    setComplete(newTitles);
    setInProgress(newAddTitles);
  };

  // ÂÆå‰∫Ü„Éú„Çø„É≥Ê©üËÉΩ
  const completeTodo = (index) => {
    const taskToMove = titles[index];
    const newTitles = [...titles.slice(0, index), ...titles.slice(index + 1)];
    setComplete([...complete, taskToMove]);
    setTitles(newTitles);
  };

  // „ÄåÂÆå‰∫Ü„Å∏„Äç„Éú„Çø„É≥Ê©üËÉΩ‚Üí„ÄåÈÄ≤Ë°å‰∏≠„Äç„Ç®„É™„Ç¢„Å´ÁßªÂãïÂæå„ÄÅ„Åì„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®„ÄåÂÆå‰∫Ü„Äç„Ç®„É™„Ç¢„Å´„Çø„Çπ„ÇØ„ÅåÁßªÂãï„Åô„Çã„Çà„ÅÜ„Å™Ê©üËÉΩ
  // „ÄåÈÄ≤Ë°å‰∏≠„Äç„Ç®„É™„Ç¢„Å´ÁßªÂãï„Åó„ÅüÈÖçÂàó„ÅÆ„Åæ„ÅæÁßªÂãï„Åï„Åõ„Åü„ÅÑ
  const sendCompleteTodo = (id) => {
    const newTitles = [...inProgress];
    newTitles.splice(id, 1);

    const newAddTitles = [...complete, inProgress[id]];
    setComplete(newAddTitles);
    setInProgress(newTitles);
  };

  // ÂâäÈô§„Éú„Çø„É≥Ê©üËÉΩ
  const todoDeleteClick = (index) => {
    const deleteTodo = [...titles];
    deleteTodo.splice(index, 1);
    setTitles(deleteTodo);
  };

  // ÂâäÈô§„Éú„Çø„É≥Ê©üËÉΩÔºàÈÄ≤Ë°å‰∏≠„Ç®„É™„Ç¢Ôºâ
  const todoDeleteInprogress = (index) => {
    const deleteTodo = [...titles];
    deleteTodo.splice(index, 1);
    setInProgress(deleteTodo);
  };

  // ÂâäÈô§„Éú„Çø„É≥Ê©üËÉΩÔºàÂÆå‰∫Ü„Ç®„É™„Ç¢Ôºâ
  const todoDeleteComplete = (index) => {
    const deleteTodo = [...titles];
    deleteTodo.splice(index, 1);
    setComplete(deleteTodo);
  };

  return (
    <>
      <div>
        <h1 className="title">YourTodo</h1>
      </div>
      <div className="input-area">
        <div>
          <input
            placeholder="Todo„ÅÆ„Çø„Ç§„Éà„É´Ôºà‰æã:Ë™≠Êõ∏ „Å™„Å©Ôºâ"
            value={inputTodoList}
            onChange={handleOnChange}
          />
        </div>
        <div>
          <input
            placeholder="Todo„ÅÆË©≥Á¥∞Ôºà‰æã:5„Éö„Éº„Ç∏Ë™≠„ÇÄ „Å™„Å©Ôºâ"
            value={inputTodoDetail}
            onChange={handleDetail}
          />
        </div>
        <button onClick={todoAddClick}>Add</button>
        <div>
          <ul>
            {titles.map((element, index) => {
              return (
                <div key={index}>
                  <li className="todoTitles">
                    <div className="todoElement">
                      <div>{element.id}</div>
                      <div>{element.title}</div>
                      <div>{element.detail}</div>
                    </div>
                    <div>
                      {todoOpenEdit === element.id ? (
                        <div>
                          <input
                            value={editTitle}
                            onChange={(e) => setEditTitle(e.target.value)}
                          />
                          <input
                            value={editDetail}
                            onChange={(e) => setEditDetail(e.target.value)}
                          />
                          <button onClick={updateEditButton}>‰øùÂ≠ò</button>
                          <button onClick={() => setTodoOpenEdit(null)}>
                            „Ç≠„É£„É≥„Çª„É´
                          </button>
                        </div>
                      ) : (
                        <div>
                          <button onClick={() => editButton(element)}>
                            Á∑®ÈõÜ
                          </button>
                          <button onClick={() => todoInProgress(index)}>
                            ÈÄ≤Ë°å‰∏≠
                          </button>
                          <button onClick={() => completeTodo(index)}>
                            ÂÆå‰∫Ü
                          </button>
                          <button onClick={() => todoDeleteClick(index)}>
                            ÂâäÈô§
                          </button>
                        </div>
                      )}
                    </div>
                  </li>
                </div>
              );
            })}
          </ul>
        </div>
      </div>
      <div className="status-area">
        <div className="in-progress">
          <p className="progress-letter">ÈÄ≤Ë°å‰∏≠</p>
          <ul>
            {inProgress.map((task, index) => (
              <li key={index}>
                <div className="todoElement">
                  <div>{task.id}</div>
                  <div>{task.title}</div>
                  <div>{task.detail}</div>
                </div>
                <div>
                  <button onClick={() => sendCompleteTodo(index)}>
                    ÂÆå‰∫Ü„Å∏
                  </button>
                  <button onClick={() => todoDeleteInprogress(index)}>
                    ÂâäÈô§
                  </button>
                </div>
              </li>
            ))}
          </ul>
        </div>
        <div className="complete">
          <p className="complete-letter">ÂÆå‰∫Ü</p>
          <ul>
            {complete.map((task, index) => (
              <li key={index}>
                <div className="todoElement">
                  <div>{task.id}</div>
                  <div>{task.title}</div>
                  <div>{task.detail}</div>
                </div>
                <div>
                  <button onClick={() => sendTodoInProgress(index)}>
                    ÈÄ≤Ë°å‰∏≠„Å∏
                  </button>
                  <button onClick={() => todoDeleteComplete(index)}>
                    ÂâäÈô§
                  </button>
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </>
  );
};

export default TodoApp;
